#!/usr/bin/env bash

# Initialize/config.

mkdir --parents /etc/bootstrap/ssl;
mkdir --parents /etc/bootstrap/ssl/data;

touch /etc/bootstrap/ssl/data/index.txt;
echo '01' > /etc/bootstrap/ssl/data/crlnumber;

cp /etc/ssl/openssl.cnf /etc/ssl/bootstrap-openssl.cnf;
perl -i -wpe 's/^(\s*)#\s*(req_extensions\s)/$1$2/u' /etc/ssl/bootstrap-openssl.cnf;
perl -i -wpe 's/^(\s*)#\s*(copy_extensions\s)/$1$2/u' /etc/ssl/bootstrap-openssl.cnf;
perl -i -wpe 's/^(\s*)(\[\s*v3_req\s*\])$/$1$2\nsubjectAltName=\$ENV::OPENSSL_CSR_ALTNAMES/u' /etc/ssl/bootstrap-openssl.cnf;
perl -i -wpe 's/^(\s*)dir\s*\=\s*[^\s]+/$1dir = \/etc\/bootstrap\/ssl\/data/u' /etc/ssl/bootstrap-openssl.cnf;

# Initialize working variables.

_ssl_csr_info='/C=US/ST=AK/L=Willow';
_ssl_csr_info+='/O=ci.vm/OU=ci.vm/CN=ci.vm';
_ssl_csr_info+='/emailAddress=hostmaster@ci.vm';
export OPENSSL_CSR_ALTNAMES='DNS:ci.vm,DNS:*.ci.vm';

# Generate CA private key & certificate for this server.

## Use existing, because it is likely that we have saved these in our local keychain already.
## Doing so allows for the CA to be marked as "Always Trust" in order to avoid self-signed errors.

ln --symbolic /bootstrap/src/ssl/vm-ca-private-key.pem /etc/bootstrap/ssl/server-ca-private-key.pem;
ln --symbolic /bootstrap/src/ssl/vm-ca-crt.pem /etc/bootstrap/ssl/server-ca-crt.pem;

## CA certificate revocation list is created always on-the-fly.

openssl ca -gencrl \
  -crldays 30000 \
  -config /etc/ssl/bootstrap-openssl.cnf \
  -keyfile /etc/bootstrap/ssl/server-ca-private-key.pem \
  -cert /etc/bootstrap/ssl/server-ca-crt.pem \
  -out /etc/bootstrap/ssl/server-ca-crl.pem;

# Server CSR, private key, and certificate.

## Generate CSR (and private key) for this server.

openssl req \
  -nodes \
  -days 30000 \
  -newkey rsa:2048 \
  -extensions v3_req \
  -subj "${_ssl_csr_info}" \
  -config /etc/ssl/bootstrap-openssl.cnf \
  -keyout /etc/bootstrap/ssl/server-private-key.pem \
  -out /etc/bootstrap/ssl/server-csr.pem;

## Generate certificate file for this server using the above.

openssl x509 \
  -req \
  -days 30000 \
  -CAcreateserial \
  -extensions v3_req \
  -in /etc/bootstrap/ssl/server-csr.pem \
  -CA /etc/bootstrap/ssl/server-ca-crt.pem \
  -CAkey /etc/bootstrap/ssl/server-ca-private-key.pem \
  -extfile /etc/ssl/bootstrap-openssl.cnf \
  -out /etc/bootstrap/ssl/server-crt.pem;

## Generate the server chains that we might need later on.

cp /etc/bootstrap/ssl/server-ca-crt.pem /etc/bootstrap/ssl/server-ca-chain.pem;
cp /etc/bootstrap/ssl/server-crt.pem /etc/bootstrap/ssl/server-ca-fullchain.pem;
cat /etc/bootstrap/ssl/server-ca-crt.pem >> /etc/bootstrap/ssl/server-ca-fullchain.pem;

# Client CSR, private key, and certificate.

## Generate CSR (and private key) for clients.

openssl req \
  -nodes \
  -days 30000 \
  -newkey rsa:2048 \
  -extensions v3_req \
  -subj "${_ssl_csr_info}" \
  -config /etc/ssl/bootstrap-openssl.cnf \
  -keyout /etc/bootstrap/ssl/client-private-key.pem \
  -out /etc/bootstrap/ssl/client-csr.pem;

## Generate certificate file for clients using the above.

openssl x509 \
  -req \
  -days 30000 \
  -CAcreateserial \
  -extensions v3_req \
  -in /etc/bootstrap/ssl/client-csr.pem \
  -CA /etc/bootstrap/ssl/server-ca-crt.pem \
  -CAkey /etc/bootstrap/ssl/server-ca-private-key.pem \
  -extfile /etc/ssl/bootstrap-openssl.cnf \
  -out /etc/bootstrap/ssl/client-crt.pem;

# Generate the DH param for Apache/Nginx.

openssl dhparam -dsaparam -out /etc/bootstrap/ssl/dhparam.pem 2048;

# Generate the official certificate files for this server.

ln --symbolic /etc/bootstrap/ssl/server-private-key.pem /etc/bootstrap/ssl/official-private-key.pem;
ln --symbolic /etc/bootstrap/ssl/server-crt.pem /etc/bootstrap/ssl/official-crt.pem;
ln --symbolic /etc/bootstrap/ssl/server-ca-chain.pem /etc/bootstrap/ssl/official-chain.pem;
ln --symbolic /etc/bootstrap/ssl/server-ca-fullchain.pem /etc/bootstrap/ssl/official-fullchain.pem;

# Housekeeping.

rm -rf /tmp/ca-files;
unset _ssl_csr_info;
