#!/usr/bin/env bash

# Maybe install/configure WordPress.

if [[ -n "${CI_RUN_WP:-}" ]]; then

  echo; # Double-space a new section.
  echo '--- WordPress Installation Process -----------------------------------';
  echo; # Space before WP-CLI output that follows.

  # Remove existing `/app`.

  rm --force --recursive /app;
  mkdir --parents /app/src;

  # Download via cURL or WP-CLI (easier).

  if [[ "${CI_RUN_WP_VERSION}" == 'nightly' ]]; then
    _download_url=https://wordpress.org/nightly-builds/wordpress-latest.zip;
  elif [[ -z "${CI_RUN_WP_VERSION}" || "${CI_RUN_WP_VERSION}" == 'latest' ]]; then
    _download_url=https://wordpress.org/latest.zip;
  else # Assume it is a specific version.
    _download_url=https://wordpress.org/wordpress-"${CI_RUN_WP_VERSION}".zip
  fi;
  curl "${_download_url}" --location --output /tmp/wordpress.zip;
  unzip -qq -d /tmp/wordpress /tmp/wordpress.zip; # Extract from ZIP file.
  cp --force --recursive --preserve=all /tmp/wordpress/wordpress/. /app/src;

  rm --force --recursive /tmp/wordpress;
  rm /tmp/wordpress.zip;
  unset _download_url;

  # Install and configure WordPress.

  for _wp_run in standard multisite; do

    # Work out conditional variables; else continue if n/a.

    if [[ "${CI_RUN_WP}" == 'multisite' && "${CI_RUN_WP}" == "${_wp_run}" ]]; then
      _wp_install_command='multisite-install';
      _wp_htaccess_file=/bootstrap-ci/src/docker/tests/includes/wordpress/.htaccess-ms;

    elif [[ "${CI_RUN_WP}" == 'standard' && "${CI_RUN_WP}" == "${_wp_run}" ]]; then
      _wp_install_command='install';
      _wp_htaccess_file=/bootstrap-ci/src/docker/tests/includes/wordpress/.htaccess;

    else continue; fi; # Bypass; not applicable.

    # Generate a `/wp-config.php` file.

    wp core config \
      --dbhost="${CFG_MYSQL_DB_HOST}":"${CFG_MYSQL_DB_PORT}" \
      --dbname="${CFG_MYSQL_DB_NAME}" --dbprefix=wp_ \
      --dbcharset="${CFG_MYSQL_DB_CHARSET}" --dbcollate="${CFG_MYSQL_DB_COLLATE}" \
      --dbuser="${CFG_MYSQL_DB_USERNAME}" --dbpass="${CFG_MYSQL_DB_PASSWORD}" \
      --allow-root;

    # Install WordPress DB tables, etc.

    wp core "${_wp_install_command}" \
      --title=WordPress --admin_user=admin --admin_password=admin \
      --admin_email=ci+admin@"${CFG_ROOT_HOST}" --skip-email \
      --allow-root;

    # Update permalink structure and create `.htaccess` file.

    wp rewrite structure '/%postname%/' --allow-root;
    cp --force "${_wp_htaccess_file}" /app/src/.htaccess;

    # Create 2 users w/ each default role (10 users total).

    for _wp_role in administrator editor author contributor subscriber; do
      for _wp_user_i in {1..2}; do
        wp user create "${_wp_role}${_wp_user_i}" ci+"${_wp_role}${_wp_user_i}@${CFG_ROOT_HOST}" --user_pass="${_wp_role}${_wp_user_i}" --role="${_wp_role}" \
          --first_name=Test --last_name="${_wp_role^}${_wp_user_i}" --display_name='Test '"${_wp_role^}${_wp_user_i}" --allow-root;
      done; unset _wp_user_i;
    done; unset _wp_role;

    # Create 2 additional users (generic subscribers) for testing purposes.

    for _wp_user_i in {1..2}; do
      wp user create user"${_wp_user_i}" ci+user"${_wp_user_i}@${CFG_ROOT_HOST}" --user_pass=user"${_wp_user_i}" --role=subscriber \
        --first_name=Test --last_name=User"${_wp_user_i}" --display_name='Test User'"${_wp_user_i}" --allow-root;
    done; unset _wp_user_i;

    # If multisite, create 2 child sites & add users to those sites.

    if [[ "${CI_RUN_WP}" == 'multisite' ]]; then
      for _wp_site_i in {1..2}; do
        wp site create --slug=site"${_wp_site_i}" --title=Site"${_wp_site_i}" --allow-root;

        wp user set-role admin administrator --url=https://"${CFG_HOST}"/site"${_wp_site_i}" --allow-root;

        for _wp_role in administrator editor author contributor subscriber; do
          for _wp_user_i in {1..2}; do
            wp user set-role "${_wp_role}${_wp_user_i}" "${_wp_role}" --url=https://"${CFG_HOST}"/site"${_wp_site_i}" --allow-root;
          done; unset _wp_user_i;
        done; unset _wp_role;

        for _wp_user_i in {1..2}; do
          wp user set-role user"${_wp_user_i}" subscriber --url=https://"${CFG_HOST}"/site"${_wp_site_i}" --allow-root;
        done; unset _wp_user_i;
      done; unset _wp_site_i;
    fi;
    # If this is a WP theme or plugin; symlink & activate.

    if [[ -f "${CI_CFG_PROJECT_BUILD_DIR}"/readme.txt ]]; then

      # Work out the WP Sharks Core version now.

      if [[ -z "${CI_RUN_WP_SHARKS_CORE_VERSION}" || "${CI_RUN_WP_SHARKS_CORE_VERSION}" == 'latest' ]]; then
        _wp_sharks_core_download_url=http://www.websharks-inc.com/r/wp-sharks-core-latest-zip/#wp-sharks-core.zip;
      else
        _wp_sharks_core_download_url=https://github.com/websharks/wp-sharks-core/releases/download/"${CI_RUN_WP_SHARKS_CORE_VERSION}"/wp-sharks-core.zip;
      fi;
      # If this is a WordPress plugin.

      if [[ -f "${CI_CFG_PROJECT_BUILD_DIR}"/plugin.php || -f "${CI_CFG_PROJECT_BUILD_DIR}"/"${CI_CFG_PROJECT_DIR_BASENAME}".php ]]; then
        cp --force --recursive --preserve=all "${CI_CFG_PROJECT_BUILD_DIR}"/. /app/src/wp-content/plugins/"${CI_CFG_PROJECT_DIR_BASENAME}";

        # Maybe activate network-wide.

        if [[ "${CI_RUN_WP}" == 'multisite' ]]; then
          wp plugin install "${_wp_sharks_core_download_url}" --activate-network --allow-root
          wp plugin activate "${CI_CFG_PROJECT_DIR_BASENAME}" --network --allow-root;

        else # Standard plugin activation in this case.
          wp plugin install "${_wp_sharks_core_download_url}" --activate --allow-root
          wp plugin activate "${CI_CFG_PROJECT_DIR_BASENAME}" --allow-root;
        fi;
      # If this is a WordPress theme.

      elif [[ -f "${CI_CFG_PROJECT_BUILD_DIR}"/style.css || -f "${CI_CFG_PROJECT_BUILD_DIR}"/functions.php ]]; then
        cp --force --recursive --preserve=all "${CI_CFG_PROJECT_BUILD_DIR}"/. /app/src/wp-content/themes/"${CI_CFG_PROJECT_DIR_BASENAME}";

        # Maybe enable & activate network-wide.

        if [[ "${CI_RUN_WP}" == 'multisite' ]]; then
          wp plugin install "${_wp_sharks_core_download_url}" --activate-network --allow-root
          wp theme enable "${CI_CFG_PROJECT_DIR_BASENAME}" --network --activate --allow-root;

          for _wp_site_i in {1..2}; do
            wp theme activate "${CI_CFG_PROJECT_DIR_BASENAME}" --url=https://"${CFG_HOST}"/site"${_wp_site_i}" --allow-root;
          done; unset _wp_site_i;

        else # Standard theme activation in this case.
          wp plugin install "${_wp_sharks_core_download_url}" --activate --allow-root
          wp theme activate "${CI_CFG_PROJECT_DIR_BASENAME}" --allow-root;
        fi;
      fi;
      unset _wp_sharks_core_download_url; # Housekeeping.
    fi;
  done; unset _wp_run; unset _wp_install_command; unset _wp_htaccess_file;

  # Update permissions in the `/app` directory.

  chown --recursive nobody:app /app;
  find /app -type d -exec chmod 2775 {} \;
  find /app -type f -exec chmod 664 {} \;

  chown --recursive www-data /app/src;
  find /app/src -type d -exec chmod 2775 {} \;
  find /app/src -type f -exec chmod 664 {} \;
fi;
